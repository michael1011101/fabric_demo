swagger: "2.0"

info:
  description: "The readingAsset chaincode can read/write vehicle odometer readings
    onto the blockchain and can expose these functions as REST API.
    THIS SAMPLE CODE MAY BE USED SOLELY AS PART OF THE TEST AND EVALUATION OF THE SAP CLOUD PLATFORM
    BLOCKCHAIN SERVICE (THE “SERVICE”) AND IN ACCORDANCE WITH THE AGREEMENT FOR THE SERVICE.
    THIS SAMPLE CODE PROVIDED “AS IS”, WITHOUT ANY WARRANTY, ESCROW, TRAINING, MAINTENANCE, OR
    SERVICE OBLIGATIONS WHATSOEVER ON THE PART OF SAP."
  version: "1.0"
  title: "exchain"

consumes:
  - application/json

tags:
- name: "Participant"
  description : "Participant api"
- name: "Credit"
- name: "LoB"
- name: "Ticket"
- name: "Order"
      
schemes:
- "http"
- "https"
paths:
 
  /Participant:
    get:
      tags: 
      - "Participant"
      operationId: readAllParticipant
      summary: Read all (existing) Participants
      produces:
      - application/json
      responses:
        200:
          description: OK
        500:
          description: Failed

    post:
      tags: 
      - "Participant"
      operationId: addParticipant
      summary: Add a new Participant
      consumes:
      - application/json
      parameters:
      - in: body
        name: body
        description: New Participant
        required: true
        schema:
          $ref: '#/definitions/Participant'
      responses:
        200:
          description: Reading Written
        405:
          description: Invalid Input
        500:
          description: Failed
 
    put:
      tags: 
      - "Participant"
      operationId: updateParticipant
      summary: Update a existing Participant
      consumes:
      - application/json
      parameters:
      - in: body
        name: body
        description: Existing Participant
        required: true
        schema:
          $ref: '#/definitions/Participant'
      responses:
        200:
          description: Reading Written
        405:
          description: Invalid Input
        500:
          description: Failed
          
  /Participant/{id}:
    delete:
      tags: 
      - "Participant"
      operationId: deleteParticipant
      summary: Remove a existing Participant
      parameters:
      - $ref: '#/parameters/id'
      produces:
        - application/json
      responses:
        200:
          description: OK
        405:
          description: Invalid Input
        500:
          description: Failed

    get:
      tags: 
      - "Participant"
      operationId: readParticipant
      summary: Read a Participant
      parameters:
      - $ref: '#/parameters/id'
      produces:
      - application/json
      responses:
        200:
          description: OK
        405:
          description: Invalid Input
        500:
          description: Failed
  
  # ===========  Decide not to public this API ===========
  # /Credit/{userid}/{value}: 
  #   post:
  #     tags: 
  #     - "Credit"
  #     operationId: CreditCreate
  #     summary: Create a Credit
  #     consumes:
  #     - application/json
  #     parameters:
  #     - $ref: '#/parameters/userid'
  #     - $ref: '#/parameters/value'
  #     responses:
  #       200:
  #         description: Reading Written
  #       405:
  #         description: Invalid Input
  #       500:
  #         description: Failed
        
    #  ===========  CAN NOT WORK ===
    # /Credit:  
    # put:
    #   tags:
    #   - "Credit"
    #   operationId: CreditAdd
    #   summary: Update a Credit
    #   consumes:
    #   - application/json
    #   parameters:
    #   - in: body
    #     name: body
    #     description: New Credit
    #     required: true
    #     schema:
    #       $ref: '#/definitions/Credit'
    #   responses:
    #     200:
    #       description: Reading Written
    #     405:
    #       description: Invalid Input
    #     500:
    #       description: Failed
   

  /Credit/:
    get:      
      tags:
      - "Credit"
      operationId: TopTenCredit
      summary: list participants having top 10 credits
      produces:
      - application/json
      responses:
        200:
          description: OK
        500:
          description: Failed
          
  /Credit/{userid}:
    get:
      tags:
      - "Credit"
      operationId: CreditRead
      summary: Read a Credit
      parameters:
      - $ref: '#/parameters/userid'
      produces:
      - "application/json"
      responses:
        200:
          description: Reading Written
        405:
          description: Invalid Input
        500:
          description: Failed


  /LoB/:
    get:      
      tags:
      - "LoB"
      operationId: LoBReadAll
      summary: Read credit of every LoB 
      produces:
      - application/json
      responses:
        200:
          description: OK
        500:
          description: Failed

  /LoB/{lobid}:
    get:
      tags:
      - "LoB"
      operationId: LoBRead
      summary: Read LoB info
      parameters:
      - $ref: '#/parameters/lobid'
      produces:
      - "application/json"
      responses:
        200:
          description: Reading Written
        405:
          description: Invalid Input
        500:
          description: Failed

  /Ticket/:
    get:      
      tags:
      - "Ticket"
      operationId: TicketRead2
      summary: Read all (existing) Tickets
      produces:
      - application/json
      responses:
        200:
          description: OK
        500:
          description: Failed
    post:
      tags:
      - "Ticket"
      operationId: TicketCreate
      summary: Create a Ticket
      consumes:
      - application/json
      parameters:
      - in: body
        name: body
        description: New Ticket
        required: true
        schema:
          $ref: '#/definitions/TicketInit'
      responses:
        200:
          description: Reading Written
        405:
          description: Invalid Input
        500:
          description: Failed
    put:
      tags:
        - "Ticket"
      operationId: TicketUpdate
      summary: User apply ticket
      consumes:
      - application/json
      parameters:
      - in: body
        name: body
        description: New Ticket
        required: true
        schema:
          $ref: '#/definitions/Ticket'
      responses:
        200:
          description: Reading Written
        405:
          description: Invalid Input
        500:
          description: Failed
          
  /Ticket/{ticketid}: 
    # delete:
    #   tags:
    #   - "Ticket"
    #   operationId: TicketDelete
    #   summary: Delete a Ticket
    #   parameters:
    #   - $ref: '#/parameters/ticketid'
    #   produces:
    #   - "application/json"
    #   responses:
    #     200:
    #       description: Reading Written
    #     405:
    #       description: Invalid Input
    #     500:
    #       description: Failed
    get:
      tags:
        - "Ticket"
      operationId: TicketRead
      summary: Read a ticket
      parameters:
      - $ref: '#/parameters/ticketid'
      produces:
      - "application/json"
      responses:
        200:
          description: Reading Written
        405:
          description: Invalid Input
        500:
          description: Failed
    put:
      tags:
        - "Ticket"
      operationId: AutoUpdateTicketStatus
      summary: Auto update ticket status 
      parameters:
      - $ref: '#/parameters/ticketid'
      produces:
      - "application/json"
      responses:
        200:
          description: Reading Written
        405:
          description: Invalid Input
        500:
          description: Failed   

  /Order: 
    post:
      tags: 
      - "Order"
      operationId: OrderCreate
      summary: Create a Order
      consumes:
      - application/json
      parameters:
      - in: body
        name: body
        description: Create a Order
        required: true
        schema:
          $ref: '#/definitions/OrderInit'
      responses:
        200:
          description: Reading Written
        405:
          description: Invalid Input
        500:
          description: Failed
    put:
      tags: 
      - "Order"
      operationId: OrderUpdate
      summary: Update a Order
      consumes:
      - application/json
      parameters:
      - in: body
        name: body
        description: Update a Order
        required: true
        schema:
          $ref: '#/definitions/OrderUpdate'
      responses:
        200:
          description: Reading Written
        405:
          description: Invalid Input
        500:
          description: Failed
    
  /Order/{ticketid}/{userid}: 
    get:
      tags: 
      - "Order"
      operationId: OrderRead
      summary: Read a Order
      consumes:
      - application/json
      parameters:
      - $ref: '#/parameters/ticketid'
      - $ref: '#/parameters/userid'
      responses:
        200:
          description: Reading Written
        405:
          description: Invalid Input
        500:
          description: Failed
  /Order/{ticketid}: 
    get:
      tags: 
      - "Order"
      operationId: OrderRead2
      summary: Read all Orders of the ticket
      consumes:
      - application/json
      parameters:
      - $ref: '#/parameters/ticketid'
      responses:
        200:
          description: Reading Written
        405:
          description: Invalid Input
        500:
          description: Failed
parameters:
  id:
    name: id
    in: path
    description: ID of the Odometer Reading
    required: true
    type: string
    maxLength: 64
  
  userid:
    name: userid
    in: path
    description: ID of the User
    required: true
    type: string

  lobid:
    name: lobid
    in: path
    description: ID of the LoB
    required: true
    type: string
  
  ticketid:
    name: ticketid
    in: path
    description: ID of the Ticket
    required: true
    type: string
    
  value:
    name: value
    in: path
    description: value of the Ticket
    required: true
    type: integer

definitions:
  Participant:
    type: object
    properties:
      Participant_UserID:
        type: string
      Participant_UserName:
        type: string
      Participant_Password:
        type: string
      Participant_IsAdmin:
        type: boolean
      Participant_LoBID:
        type: integer
  
  Credit:
    type: object
    properties:
      Credit_UserID:
        type: string
      Credit_Value:
        type: integer
      Credit_TicketIDs:
        type: array
        items:
          type: string
  
  LoB:
    type: object
    properties:
      LoB_LobID:
        type: integer
      LoB_TotalCredit:
        type: integer
      LoB_UserIDs:
        type: array
        items:
          type: string
      
  Ticket:
    type: object
    properties:
      Ticket_TicketID:
        type: string
      Ticket_Status:
        type: integer
      Ticket_Title:
        type: string
      Ticket_Type:
        type: integer
      Ticket_Value:
        type: integer
      Ticket_UserID:
        type: string
      Ticket_Comment:
        type: string
      Ticket_Policy:
        type: string
        
  TicketInit:
    type: object
    properties:
      Ticket_UserID:
        type: string
      Ticket_Value:
        type: integer
      Ticket_Title:
        type: string
      Ticket_Type:
        type: integer
      Ticket_Comment:
        type: string
      Ticket_Policy:
        type: string
  
  Order:
    type: object
    properties:
      TicketID:
        type: string
      UserID:
        type: string
      Status:
        type: integer
        
  OrderInit:
    type: object
    properties:
      TicketID:
        type: string
      UserID:
        type: string
        
  OrderUpdate:
    type: object
    properties:
      TicketID:
        type: string
      Confirm:
        type: array
        items:
          type: string


  
  

